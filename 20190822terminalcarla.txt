0>, <carla.libcarla.Transform object at 0x7fee180b43f0>, <carla.libcarla.Transform object at 0x7fee180b4450>, <carla.libcarla.Transform object at 0x7fee180b44b0>, <carla.libcarla.Transform object at 0x7fee180b4510>, <carla.libcarla.Transform object at 0x7fee180b4570>, <carla.libcarla.Transform object at 0x7fee180b45d0>, <carla.libcarla.Transform object at 0x7fee180b4630>, <carla.libcarla.Transform object at 0x7fee180b4690>, <carla.libcarla.Transform object at 0x7fee180b46f0>, <carla.libcarla.Transform object at 0x7fee180b4750>, <carla.libcarla.Transform object at 0x7fee180b47b0>, <carla.libcarla.Transform object at 0x7fee180b4810>, <carla.libcarla.Transform object at 0x7fee180b4870>, <carla.libcarla.Transform object at 0x7fee180b48d0>, <carla.libcarla.Transform object at 0x7fee180b4930>, <carla.libcarla.Transform object at 0x7fee180b4990>, <carla.libcarla.Transform object at 0x7fee180b49f0>, <carla.libcarla.Transform object at 0x7fee180b4a50>, <carla.libcarla.Transform object at 0x7fee180b4ab0>, <carla.libcarla.Transform object at 0x7fee180b4b10>, <carla.libcarla.Transform object at 0x7fee180b4b70>, <carla.libcarla.Transform object at 0x7fee180b4bd0>, <carla.libcarla.Transform object at 0x7fee180b4c30>, <carla.libcarla.Transform object at 0x7fee180b4c90>, <carla.libcarla.Transform object at 0x7fee180b4cf0>, <carla.libcarla.Transform object at 0x7fee180b4d50>, <carla.libcarla.Transform object at 0x7fee180b4db0>, <carla.libcarla.Transform object at 0x7fee180b4e10>, <carla.libcarla.Transform object at 0x7fee180b4e70>, <carla.libcarla.Transform object at 0x7fee180b4ed0>, <carla.libcarla.Transform object at 0x7fee180b4f30>, <carla.libcarla.Transform object at 0x7fee180b4f90>, <carla.libcarla.Transform object at 0x7fee180b3030>, <carla.libcarla.Transform object at 0x7fee180b3090>, <carla.libcarla.Transform object at 0x7fee180b30f0>, <carla.libcarla.Transform object at 0x7fee180b3150>, <carla.libcarla.Transform object at 0x7fee180b31b0>, <carla.libcarla.Transform object at 0x7fee180b3210>, <carla.libcarla.Transform object at 0x7fee180b3270>, <carla.libcarla.Transform object at 0x7fee180b32d0>, <carla.libcarla.Transform object at 0x7fee180b3330>, <carla.libcarla.Transform object at 0x7fee180b3390>, <carla.libcarla.Transform object at 0x7fee180b33f0>, <carla.libcarla.Transform object at 0x7fee180b3450>, <carla.libcarla.Transform object at 0x7fee180b34b0>, <carla.libcarla.Transform object at 0x7fee180b3510>, <carla.libcarla.Transform object at 0x7fee180b3570>, <carla.libcarla.Transform object at 0x7fee180b35d0>, <carla.libcarla.Transform object at 0x7fee180b3630>, <carla.libcarla.Transform object at 0x7fee180b3690>, <carla.libcarla.Transform object at 0x7fee180b36f0>, <carla.libcarla.Transform object at 0x7fee180b3750>, <carla.libcarla.Transform object at 0x7fee180b37b0>, <carla.libcarla.Transform object at 0x7fee180b3810>, <carla.libcarla.Transform object at 0x7fee180b3870>, <carla.libcarla.Transform object at 0x7fee180b38d0>, <carla.libcarla.Transform object at 0x7fee180b3930>, <carla.libcarla.Transform object at 0x7fee180b3990>, <carla.libcarla.Transform object at 0x7fee180b39f0>, <carla.libcarla.Transform object at 0x7fee180b3a50>, <carla.libcarla.Transform object at 0x7fee180b3ab0>, <carla.libcarla.Transform object at 0x7fee180b3b10>, <carla.libcarla.Transform object at 0x7fee180b3b70>, <carla.libcarla.Transform object at 0x7fee180b3bd0>, <carla.libcarla.Transform object at 0x7fee180b3c30>, <carla.libcarla.Transform object at 0x7fee180b3c90>, <carla.libcarla.Transform object at 0x7fee180b3cf0>, <carla.libcarla.Transform object at 0x7fee180b3d50>, <carla.libcarla.Transform object at 0x7fee180b3db0>, <carla.libcarla.Transform object at 0x7fee180b3e10>, <carla.libcarla.Transform object at 0x7fee180b3e70>, <carla.libcarla.Transform object at 0x7fee180b3ed0>, <carla.libcarla.Transform object at 0x7fee180b3f30>, <carla.libcarla.Transform object at 0x7fee180b3f90>, <carla.libcarla.Transform object at 0x7fee180c8030>, <carla.libcarla.Transform object at 0x7fee180c8090>, <carla.libcarla.Transform object at 0x7fee180c80f0>, <carla.libcarla.Transform object at 0x7fee180c8150>, <carla.libcarla.Transform object at 0x7fee180c81b0>, <carla.libcarla.Transform object at 0x7fee180c8210>, <carla.libcarla.Transform object at 0x7fee180c8270>, <carla.libcarla.Transform object at 0x7fee180c82d0>, <carla.libcarla.Transform object at 0x7fee180c8330>, <carla.libcarla.Transform object at 0x7fee180c8390>, <carla.libcarla.Transform object at 0x7fee180c83f0>, <carla.libcarla.Transform object at 0x7fee180c8450>, <carla.libcarla.Transform object at 0x7fee180c84b0>, <carla.libcarla.Transform object at 0x7fee180c8510>, <carla.libcarla.Transform object at 0x7fee180c8570>, <carla.libcarla.Transform object at 0x7fee180c85d0>, <carla.libcarla.Transform object at 0x7fee180c8630>, <carla.libcarla.Transform object at 0x7fee180c8690>, <carla.libcarla.Transform object at 0x7fee180c86f0>, <carla.libcarla.Transform object at 0x7fee180c8750>, <carla.libcarla.Transform object at 0x7fee180c87b0>, <carla.libcarla.Transform object at 0x7fee180c8810>, <carla.libcarla.Transform object at 0x7fee180c8870>, <carla.libcarla.Transform object at 0x7fee180c88d0>, <carla.libcarla.Transform object at 0x7fee180c8930>, <carla.libcarla.Transform object at 0x7fee180c8990>, <carla.libcarla.Transform object at 0x7fee180c89f0>, <carla.libcarla.Transform object at 0x7fee180c8a50>, <carla.libcarla.Transform object at 0x7fee180c8ab0>, <carla.libcarla.Transform object at 0x7fee180c8b10>, <carla.libcarla.Transform object at 0x7fee180c8b70>, <carla.libcarla.Transform object at 0x7fee180c8bd0>, <carla.libcarla.Transform object at 0x7fee180c8c30>, <carla.libcarla.Transform object at 0x7fee180c8c90>, <carla.libcarla.Transform object at 0x7fee180c8cf0>, <carla.libcarla.Transform object at 0x7fee180c8d50>, <carla.libcarla.Transform object at 0x7fee180c8db0>, <carla.libcarla.Transform object at 0x7fee180c8e10>, <carla.libcarla.Transform object at 0x7fee180c8e70>, <carla.libcarla.Transform object at 0x7fee180c8ed0>, <carla.libcarla.Transform object at 0x7fee180c8f30>, <carla.libcarla.Transform object at 0x7fee180c8f90>, <carla.libcarla.Transform object at 0x7fee180c7030>, <carla.libcarla.Transform object at 0x7fee180c7090>, <carla.libcarla.Transform object at 0x7fee180c70f0>, <carla.libcarla.Transform object at 0x7fee180c7150>, <carla.libcarla.Transform object at 0x7fee180c71b0>, <carla.libcarla.Transform object at 0x7fee180c7210>, <carla.libcarla.Transform object at 0x7fee180c7270>, <carla.libcarla.Transform object at 0x7fee180c72d0>, <carla.libcarla.Transform object at 0x7fee180c7330>, <carla.libcarla.Transform object at 0x7fee180c7390>, <carla.libcarla.Transform object at 0x7fee180c73f0>, <carla.libcarla.Transform object at 0x7fee180c7450>, <carla.libcarla.Transform object at 0x7fee180c74b0>, <carla.libcarla.Transform object at 0x7fee180c7510>, <carla.libcarla.Transform object at 0x7fee180c7570>, <carla.libcarla.Transform object at 0x7fee180c75d0>, <carla.libcarla.Transform object at 0x7fee180c7630>, <carla.libcarla.Transform object at 0x7fee180c7690>, <carla.libcarla.Transform object at 0x7fee180c76f0>, <carla.libcarla.Transform object at 0x7fee180c7750>]
>>> help(Transform)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'Transform' is not defined
>>> dir(Transform) 
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'Transform' is not defined
>>> world.get_actors()
<carla.libcarla.ActorList object at 0x7fee180e1ef8>
>>> actor_list=world.get_actors() 
>>> for speed_sign in actor_list.filter('traffic.speed_limit.*'):
...     print(speed_sign.get_location())
... 
Location(x=-83.099991, y=191.399078, z=0.152401)
Location(x=224.599991, y=90.399078, z=0.102401)
Location(x=238.841003, y=170.333435, z=1.808194)
Location(x=90.641014, y=188.483429, z=1.258194)
Location(x=247.936935, y=117.181549, z=0.526719)
Location(x=43.386932, y=188.631561, z=0.226719)
Location(x=71.652374, y=-145.270218, z=7.632200)
Location(x=94.258369, y=-146.386414, z=7.735237)
Location(x=162.870285, y=-144.941574, z=8.147064)
Location(x=71.224640, y=-67.036301, z=7.921471)
Location(x=141.730560, y=-65.413078, z=7.986372)
>>> blueprint1 = world.get_blueprint_library().find('ford.mustang')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: blueprint 'ford.mustang' not found
>>> blueprint1 = world.get_blueprint_library().find('sensor.camera.rgb')
>>> blueprint1.set_attribute('image_siez_x','1920')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: attribute 'image_siez_x' not found
>>> blueprint1.set_attribute('image_size_x','1920') 
>>> blueprint1.get_attribute()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
Boost.Python.ArgumentError: Python argument types in
    ActorBlueprint.get_attribute(ActorBlueprint)
did not match C++ signature:
    get_attribute(carla::client::ActorBlueprint, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
>>> print(blueprint1)  
ActorBlueprint(id=sensor.camera.rgb,tags=[rgb, camera, sensor])
>>> print(blueprint)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'blueprint' is not defined
>>> blueprint2 = world.get_blueprint_library().find('sensor.camera.rgb')
>>> blueprint2.set_attribute('image_size_x','1020') 
>>> print(blueprint2)                              ActorBlueprint(id=sensor.camera.rgb,tags=[rgb, camera, sensor])
>>> print(blueprint1)                              ActorBlueprint(id=sensor.camera.rgb,tags=[rgb, camera, sensor])
>>> spectator = world.get_spectator()
>>> vehicle_bp = random.choice(world.get_blueprint_library().filter('vehicle.bmw.*'))
>>> transform = random.choice(world.get_map().get_spawn_points())
>>> vehicle = world.try_spawn_actor(vehicle_bp, transform)
>>> world.tick()
790048
>>> world_snapshot = world.wait_for_tick()
>>> actor_snapshot = world_snapshot.find(vehicle.id)
>>> spectator.set_transform(actor_snapshot.get_transform())
>>> camera = world.spawn_actor(rgb_camera_bp, transform, attach_to=vehicle, attachment_type=Attachment.SpringArm)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'rgb_camera_bp' is not defined
>>> walker_bp = world.get_blueprint_library().filter('walker.pedestrian.0002')
>>> walker_bp.set_attribute('is_invincible', True)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'BlueprintLibrary' object has no attribute 'set_attribute'
>>> 
>>> walker_bp.set_attribute('is_invincible', True)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'BlueprintLibrary' object has no attribute 'set_attribute'
>>> walker_bp = world.get_blueprint_library().filter('walker.pedestrian.0002')
>>> walker_bp.set_attribute('is_invincible', True) Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'BlueprintLibrary' object has no attribute 'set_attribute'
>>> vehicle_bp = wolrd.get_blueprint_library().filter('vehicle.bmw.*')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'wolrd' is not defined
>>> vehicle_bp = world.get_blueprint_library().filter('vehicle.bmw.*')
>>> color = random.choice(vehicle_bp.get_attribute('color').recommended_values)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'BlueprintLibrary' object has no attribute 'get_attribute'
>>> blueprints = [bp for bp in world.get_blueprint_library().filter('*')]
>>> for blueprint in blueprints:
...    print(blueprint.id)
...    for attr in blueprint:
...        print(attr)
... 
vehicle.audi.a2
ActorAttribute(id=number_of_wheels,type=int,value=4(const))
ActorAttribute(id=sticky_control,type=bool,value=True)
ActorAttribute(id=object_type,type=str,value=(const))
ActorAttribute(id=color,type=Color,value=Color(224,0,0,255))
ActorAttribute(id=role_name,type=str,value=autopilot)
vehicle.mercedes-benz.coupe
ActorAttribute(id=number_of_wheels,type=int,value=4(const))
ActorAttribute(id=sticky_control,type=bool,value=True)
ActorAttribute(id=object_type,type=str,value=(const))
ActorAttribute(id=color,type=Color,value=Color(183,187,162,255))
ActorAttribute(id=role_name,type=str,value=autopilot)
static.prop.shoppingtrolley
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
controller.ai.walker
ActorAttribute(id=role_name,type=str,value=default)
vehicle.bmw.grandtourer
ActorAttribute(id=number_of_wheels,type=int,value=4(const))
ActorAttribute(id=sticky_control,type=bool,value=True)
ActorAttribute(id=object_type,type=str,value=(const))
ActorAttribute(id=color,type=Color,value=Color(109,109,109,255))
ActorAttribute(id=role_name,type=str,value=autopilot)
sensor.other.obstacle
ActorAttribute(id=debug_linetrace,type=bool,value=False)
ActorAttribute(id=hit_radius,type=float,value=0.5)
ActorAttribute(id=distance,type=float,value=5)
ActorAttribute(id=sensor_tick,type=float,value=0)
ActorAttribute(id=only_dynamics,type=bool,value=False)
ActorAttribute(id=role_name,type=str,value=front)
static.prop.dirtdebris01
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
vehicle.bmw.isetta
ActorAttribute(id=number_of_wheels,type=int,value=4(const))
ActorAttribute(id=sticky_control,type=bool,value=True)
ActorAttribute(id=object_type,type=str,value=(const))
ActorAttribute(id=color,type=Color,value=Color(21,158,255,255))
ActorAttribute(id=role_name,type=str,value=autopilot)
vehicle.carlamotors.carlacola
ActorAttribute(id=number_of_wheels,type=int,value=4(const))
ActorAttribute(id=sticky_control,type=bool,value=True)
ActorAttribute(id=object_type,type=str,value=(const))
ActorAttribute(id=color,type=Color,value=Color(255,68,0,255))
ActorAttribute(id=role_name,type=str,value=autopilot)
vehicle.citroen.c3
ActorAttribute(id=number_of_wheels,type=int,value=4(const))
ActorAttribute(id=sticky_control,type=bool,value=True)
ActorAttribute(id=object_type,type=str,value=(const))
ActorAttribute(id=color,type=Color,value=Color(73,155,204,255))
ActorAttribute(id=role_name,type=str,value=autopilot)
static.prop.table
ActorAttribute(id=size,type=str,value=medium(const))
ActorAttribute(id=role_name,type=str,value=prop)
vehicle.dodge_charger.police
ActorAttribute(id=number_of_wheels,type=int,value=4(const))
ActorAttribute(id=sticky_control,type=bool,value=True)
ActorAttribute(id=object_type,type=str,value=(const))
ActorAttribute(id=color,type=Color,value=Color(9,33,0,255))
ActorAttribute(id=role_name,type=str,value=autopilot)
static.prop.barrel
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
vehicle.mini.cooperst
ActorAttribute(id=number_of_wheels,type=int,value=4(const))
ActorAttribute(id=sticky_control,type=bool,value=True)
ActorAttribute(id=object_type,type=str,value=(const))
ActorAttribute(id=color,type=Color,value=Color(255,241,0,255))
ActorAttribute(id=role_name,type=str,value=autopilot)
static.prop.plasticbag
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.box02
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
vehicle.ford.mustang
ActorAttribute(id=number_of_wheels,type=int,value=4(const))
ActorAttribute(id=sticky_control,type=bool,value=True)
ActorAttribute(id=object_type,type=str,value=(const))
ActorAttribute(id=color,type=Color,value=Color(25,25,63,255))
ActorAttribute(id=role_name,type=str,value=autopilot)
vehicle.nissan.micra
ActorAttribute(id=number_of_wheels,type=int,value=4(const))
ActorAttribute(id=sticky_control,type=bool,value=True)
ActorAttribute(id=object_type,type=str,value=(const))
ActorAttribute(id=color,type=Color,value=Color(243,243,243,255))
ActorAttribute(id=role_name,type=str,value=autopilot)
static.prop.streetbarrier
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
vehicle.toyota.prius
ActorAttribute(id=number_of_wheels,type=int,value=4(const))
ActorAttribute(id=sticky_control,type=bool,value=True)
ActorAttribute(id=object_type,type=str,value=(const))
ActorAttribute(id=color,type=Color,value=Color(255,0,0,255))
ActorAttribute(id=role_name,type=str,value=autopilot)
vehicle.volkswagen.t2
ActorAttribute(id=number_of_wheels,type=int,value=4(const))
ActorAttribute(id=sticky_control,type=bool,value=True)
ActorAttribute(id=object_type,type=str,value=(const))
ActorAttribute(id=color,type=Color,value=Color(21,158,255,255))
ActorAttribute(id=role_name,type=str,value=autopilot)
vehicle.lincoln.mkz2017
ActorAttribute(id=number_of_wheels,type=int,value=4(const))
ActorAttribute(id=sticky_control,type=bool,value=True)
ActorAttribute(id=object_type,type=str,value=(const))
ActorAttribute(id=color,type=Color,value=Color(0,0,0,255))
ActorAttribute(id=role_name,type=str,value=autopilot)
vehicle.harley-davidson.low rider
ActorAttribute(id=number_of_wheels,type=int,value=2(const))
ActorAttribute(id=sticky_control,type=bool,value=True)
ActorAttribute(id=driver_id,type=int,value=0)
ActorAttribute(id=object_type,type=str,value=(const))
ActorAttribute(id=color,type=Color,value=Color(0,0,0,255))
ActorAttribute(id=role_name,type=str,value=autopilot)
vehicle.yamaha.yzf
ActorAttribute(id=number_of_wheels,type=int,value=2(const))
ActorAttribute(id=object_type,type=str,value=(const))
ActorAttribute(id=sticky_control,type=bool,value=True)
ActorAttribute(id=driver_id,type=int,value=0)
ActorAttribute(id=role_name,type=str,value=autopilot)
static.prop.plantpot01
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.plantpot02
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
vehicle.bh.crossbike
ActorAttribute(id=number_of_wheels,type=int,value=2(const))
ActorAttribute(id=sticky_control,type=bool,value=True)
ActorAttribute(id=driver_id,type=int,value=2)
ActorAttribute(id=object_type,type=str,value=(const))
ActorAttribute(id=color,type=Color,value=Color(255,160,145,255))
ActorAttribute(id=role_name,type=str,value=autopilot)
vehicle.jeep.wrangler_rubicon
ActorAttribute(id=number_of_wheels,type=int,value=4(const))
ActorAttribute(id=sticky_control,type=bool,value=True)
ActorAttribute(id=object_type,type=str,value=(const))
ActorAttribute(id=color,type=Color,value=Color(113,114,28,255))
ActorAttribute(id=role_name,type=str,value=autopilot)
vehicle.diamondback.century
ActorAttribute(id=number_of_wheels,type=int,value=2(const))
ActorAttribute(id=sticky_control,type=bool,value=True)
ActorAttribute(id=driver_id,type=int,value=4)
ActorAttribute(id=object_type,type=str,value=(const))
ActorAttribute(id=color,type=Color,value=Color(255,160,145,255))
ActorAttribute(id=role_name,type=str,value=autopilot)
vehicle.audi.etron
ActorAttribute(id=number_of_wheels,type=int,value=4(const))
ActorAttribute(id=sticky_control,type=bool,value=True)
ActorAttribute(id=object_type,type=str,value=(const))
ActorAttribute(id=color,type=Color,value=Color(7,112,154,255))
ActorAttribute(id=role_name,type=str,value=autopilot)
vehicle.tesla.model3
ActorAttribute(id=number_of_wheels,type=int,value=4(const))
ActorAttribute(id=sticky_control,type=bool,value=True)
ActorAttribute(id=object_type,type=str,value=(const))
ActorAttribute(id=color,type=Color,value=Color(140,0,0,255))
ActorAttribute(id=role_name,type=str,value=autopilot)
static.prop.briefcase
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
sensor.camera.rgb
ActorAttribute(id=motion_blur_max_distortion,type=float,value=0.35)
ActorAttribute(id=motion_blur_intensity,type=float,value=0.45)
ActorAttribute(id=gamma,type=float,value=2.2)
ActorAttribute(id=enable_postprocess_effects,type=bool,value=True)
ActorAttribute(id=fov,type=float,value=90)
ActorAttribute(id=image_size_y,type=int,value=600)
ActorAttribute(id=image_size_x,type=int,value=800)
ActorAttribute(id=motion_blur_min_object_screen_size,type=float,value=0.1)
ActorAttribute(id=sensor_tick,type=float,value=0)
ActorAttribute(id=role_name,type=str,value=front)
static.prop.chainbarrierend
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.plasticchair
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
sensor.lidar.ray_cast
ActorAttribute(id=lower_fov,type=float,value=-30)
ActorAttribute(id=upper_fov,type=float,value=10)
ActorAttribute(id=rotation_frequency,type=float,value=10)
ActorAttribute(id=points_per_second,type=int,value=56000)
ActorAttribute(id=range,type=float,value=1000)
ActorAttribute(id=channels,type=int,value=32)
ActorAttribute(id=sensor_tick,type=float,value=0)
ActorAttribute(id=role_name,type=str,value=front)
static.prop.motorhelmet
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
sensor.other.lane_invasion
ActorAttribute(id=role_name,type=str,value=front)
static.prop.dirtdebris02
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
walker.pedestrian.0004
ActorAttribute(id=gender,type=str,value=male(const))
ActorAttribute(id=is_invincible,type=bool,value=True)
ActorAttribute(id=age,type=str,value=adult(const))
ActorAttribute(id=role_name,type=str,value=pedestrian)
static.prop.trashbag
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.kiosk_01
ActorAttribute(id=size,type=str,value=medium(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.gnome
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.trafficwarning
ActorAttribute(id=size,type=str,value=big(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.clothcontainer
ActorAttribute(id=size,type=str,value=medium(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.mailbox
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.plantpot05
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
walker.pedestrian.0002
ActorAttribute(id=gender,type=str,value=male(const))
ActorAttribute(id=is_invincible,type=bool,value=True)
ActorAttribute(id=age,type=str,value=adult(const))
ActorAttribute(id=role_name,type=str,value=pedestrian)
static.prop.advertisement
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.plantpot06
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
walker.pedestrian.0012
ActorAttribute(id=gender,type=str,value=male(const))
ActorAttribute(id=is_invincible,type=bool,value=True)
ActorAttribute(id=age,type=str,value=adult(const))
ActorAttribute(id=role_name,type=str,value=pedestrian)
static.prop.busstop
ActorAttribute(id=size,type=str,value=big(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.garbage06
ActorAttribute(id=size,type=str,value=tiny(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.bikeparking
ActorAttribute(id=size,type=str,value=big(const))
ActorAttribute(id=role_name,type=str,value=prop)
sensor.camera.semantic_segmentation
ActorAttribute(id=fov,type=float,value=90)
ActorAttribute(id=image_size_y,type=int,value=600)
ActorAttribute(id=sensor_tick,type=float,value=0)
ActorAttribute(id=image_size_x,type=int,value=800)
ActorAttribute(id=role_name,type=str,value=front)
static.prop.plantpot08
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.clothesline
ActorAttribute(id=size,type=str,value=big(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.creasedbox03
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.creasedbox01
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
sensor.camera.depth
ActorAttribute(id=fov,type=float,value=90)
ActorAttribute(id=image_size_y,type=int,value=600)
ActorAttribute(id=sensor_tick,type=float,value=0)
ActorAttribute(id=image_size_x,type=int,value=800)
ActorAttribute(id=role_name,type=str,value=front)
walker.pedestrian.0013
ActorAttribute(id=gender,type=str,value=male(const))
ActorAttribute(id=is_invincible,type=bool,value=True)
ActorAttribute(id=age,type=str,value=adult(const))
ActorAttribute(id=role_name,type=str,value=pedestrian)
sensor.other.gnss
ActorAttribute(id=role_name,type=str,value=front)
static.prop.trafficcone02
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.colacan
ActorAttribute(id=size,type=str,value=tiny(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.platformgarbage01
ActorAttribute(id=size,type=str,value=medium(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.box01
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.shop01
ActorAttribute(id=size,type=str,value=big(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.guitarcase
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.gardenlamp
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
vehicle.gazelle.omafiets
ActorAttribute(id=number_of_wheels,type=int,value=2(const))
ActorAttribute(id=sticky_control,type=bool,value=True)
ActorAttribute(id=driver_id,type=int,value=0)
ActorAttribute(id=object_type,type=str,value=(const))
ActorAttribute(id=color,type=Color,value=Color(0,0,0,255))
ActorAttribute(id=role_name,type=str,value=autopilot)
static.prop.maptable
ActorAttribute(id=size,type=str,value=medium(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.mobile
ActorAttribute(id=size,type=str,value=tiny(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.travelcase
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.brokentile03
ActorAttribute(id=size,type=str,value=tiny(const))
ActorAttribute(id=role_name,type=str,value=prop)
vehicle.audi.tt
ActorAttribute(id=number_of_wheels,type=int,value=4(const))
ActorAttribute(id=sticky_control,type=bool,value=True)
ActorAttribute(id=object_type,type=str,value=(const))
ActorAttribute(id=color,type=Color,value=Color(255,0,0,255))
ActorAttribute(id=role_name,type=str,value=autopilot)
static.prop.trashcan02
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.streetsign04
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.brokentile01
ActorAttribute(id=size,type=str,value=tiny(const))
ActorAttribute(id=role_name,type=str,value=prop)
walker.pedestrian.0014
ActorAttribute(id=gender,type=str,value=male(const))
ActorAttribute(id=is_invincible,type=bool,value=True)
ActorAttribute(id=age,type=str,value=adult(const))
ActorAttribute(id=role_name,type=str,value=pedestrian)
static.prop.trashcan03
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.shoppingcart
ActorAttribute(id=size,type=str,value=medium(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.doghouse
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.trashcan04
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
walker.pedestrian.0001
ActorAttribute(id=gender,type=str,value=female(const))
ActorAttribute(id=is_invincible,type=bool,value=True)
ActorAttribute(id=age,type=str,value=adult(const))
ActorAttribute(id=role_name,type=str,value=pedestrian)
static.prop.shoppingbag
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.trashcan01
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.ironplank
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.plantpot04
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.pergola
ActorAttribute(id=size,type=str,value=big(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.dirtdebris03
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.glasscontainer
ActorAttribute(id=size,type=str,value=medium(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.trampoline
ActorAttribute(id=size,type=str,value=big(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.streetsign
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.streetfountain
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.slide
ActorAttribute(id=size,type=str,value=big(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.swingcouch
ActorAttribute(id=size,type=str,value=medium(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.plastictable
ActorAttribute(id=size,type=str,value=medium(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.bench02
ActorAttribute(id=size,type=str,value=medium(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.wateringcan
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
vehicle.nissan.patrol
ActorAttribute(id=number_of_wheels,type=int,value=4(const))
ActorAttribute(id=sticky_control,type=bool,value=True)
ActorAttribute(id=object_type,type=str,value=(const))
ActorAttribute(id=color,type=Color,value=Color(183,187,162,255))
ActorAttribute(id=role_name,type=str,value=autopilot)
static.prop.bench01
ActorAttribute(id=size,type=str,value=medium(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.trafficcone01
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.garbage05
ActorAttribute(id=size,type=str,value=tiny(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.garbage03
ActorAttribute(id=size,type=str,value=tiny(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.fountain
ActorAttribute(id=size,type=str,value=medium(const))
ActorAttribute(id=role_name,type=str,value=prop)
walker.pedestrian.0009
ActorAttribute(id=gender,type=str,value=female(const))
ActorAttribute(id=is_invincible,type=bool,value=True)
ActorAttribute(id=age,type=str,value=adult(const))
ActorAttribute(id=role_name,type=str,value=pedestrian)
static.prop.garbage01
ActorAttribute(id=size,type=str,value=tiny(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.constructioncone
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.plantpot03
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
walker.pedestrian.0005
ActorAttribute(id=gender,type=str,value=female(const))
ActorAttribute(id=is_invincible,type=bool,value=True)
ActorAttribute(id=age,type=str,value=adult(const))
ActorAttribute(id=role_name,type=str,value=pedestrian)
static.prop.trashcan05
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.plantpot07
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.chainbarrier
ActorAttribute(id=size,type=str,value=medium(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.vendingmachine
ActorAttribute(id=size,type=str,value=medium(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.brokentile04
ActorAttribute(id=size,type=str,value=tiny(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.box03
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
vehicle.chevrolet.impala
ActorAttribute(id=number_of_wheels,type=int,value=4(const))
ActorAttribute(id=sticky_control,type=bool,value=True)
ActorAttribute(id=object_type,type=str,value=(const))
ActorAttribute(id=color,type=Color,value=Color(61,86,143,255))
ActorAttribute(id=role_name,type=str,value=autopilot)
static.prop.purse
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
vehicle.kawasaki.ninja
ActorAttribute(id=number_of_wheels,type=int,value=2(const))
ActorAttribute(id=sticky_control,type=bool,value=True)
ActorAttribute(id=driver_id,type=int,value=0)
ActorAttribute(id=object_type,type=str,value=(const))
ActorAttribute(id=color,type=Color,value=Color(171,255,0,255))
ActorAttribute(id=role_name,type=str,value=autopilot)
static.prop.garbage04
ActorAttribute(id=size,type=str,value=tiny(const))
ActorAttribute(id=role_name,type=str,value=prop)
walker.pedestrian.0011
ActorAttribute(id=gender,type=str,value=female(const))
ActorAttribute(id=is_invincible,type=bool,value=True)
ActorAttribute(id=age,type=str,value=adult(const))
ActorAttribute(id=role_name,type=str,value=pedestrian)
static.prop.bike helmet
ActorAttribute(id=size,type=str,value=tiny(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.swing
ActorAttribute(id=size,type=str,value=medium(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.bench03
ActorAttribute(id=size,type=str,value=medium(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.bin
ActorAttribute(id=size,type=str,value=medium(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.container
ActorAttribute(id=size,type=str,value=medium(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.streetsign01
ActorAttribute(id=size,type=str,value=medium(const))
ActorAttribute(id=role_name,type=str,value=prop)
sensor.other.collision
ActorAttribute(id=role_name,type=str,value=front)
static.prop.barbeque
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.garbage02
ActorAttribute(id=size,type=str,value=tiny(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.trigger.friction
ActorAttribute(id=extent_y,type=float,value=1)
ActorAttribute(id=extent_z,type=float,value=1)
ActorAttribute(id=extent_x,type=float,value=1)
ActorAttribute(id=friction,type=float,value=3.5)
ActorAttribute(id=role_name,type=str,value=default)
static.prop.atm
ActorAttribute(id=size,type=str,value=medium(const))
ActorAttribute(id=role_name,type=str,value=prop)
walker.pedestrian.0010
ActorAttribute(id=gender,type=str,value=female(const))
ActorAttribute(id=is_invincible,type=bool,value=True)
ActorAttribute(id=age,type=str,value=adult(const))
ActorAttribute(id=role_name,type=str,value=pedestrian)
vehicle.seat.leon
ActorAttribute(id=number_of_wheels,type=int,value=4(const))
ActorAttribute(id=sticky_control,type=bool,value=True)
ActorAttribute(id=object_type,type=str,value=(const))
ActorAttribute(id=color,type=Color,value=Color(42,61,214,255))
ActorAttribute(id=role_name,type=str,value=autopilot)
walker.pedestrian.0003
ActorAttribute(id=gender,type=str,value=male(const))
ActorAttribute(id=is_invincible,type=bool,value=True)
ActorAttribute(id=age,type=str,value=adult(const))
ActorAttribute(id=role_name,type=str,value=pedestrian)
static.prop.brokentile02
ActorAttribute(id=size,type=str,value=tiny(const))
ActorAttribute(id=role_name,type=str,value=prop)
static.prop.creasedbox02
ActorAttribute(id=size,type=str,value=small(const))
ActorAttribute(id=role_name,type=str,value=prop)
walker.pedestrian.0006
ActorAttribute(id=gender,type=str,value=female(const))
ActorAttribute(id=is_invincible,type=bool,value=True)
ActorAttribute(id=age,type=str,value=adult(const))
ActorAttribute(id=role_name,type=str,value=pedestrian)
walker.pedestrian.0008
ActorAttribute(id=gender,type=str,value=female(const))
ActorAttribute(id=is_invincible,type=bool,value=True)
ActorAttribute(id=age,type=str,value=adult(const))
ActorAttribute(id=role_name,type=str,value=pedestrian)
walker.pedestrian.0007
ActorAttribute(id=gender,type=str,value=female(const))
ActorAttribute(id=is_invincible,type=bool,value=True)
ActorAttribute(id=age,type=str,value=adult(const))
ActorAttribute(id=role_name,type=str,value=pedestrian)
>>> save * > test
  File "<stdin>", line 1
    save * > test
           ^
SyntaxError: invalid syntax
>>> exit()
fenglu@ubuntu18:~/rostutorial/CARLA/carlarelease$ 
fenglu@ubuntu18:~/rostutorial/CARLA/carlarelease$ 
fenglu@ubuntu18:~/rostutorial/CARLA/carlarelease$ 
